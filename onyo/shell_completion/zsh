#compdef onyo

#
# ZSH completion script for Onyo
#
_onyo() {
    local curcontext="$curcontext" ret=1
    local -a state state_descr line
    local -A opt_args

    # $words is modified as it is passed down through the script. This keeps an
    # unmodified copy of the expanded command.
    local -a fullwords
    fullwords=("${words[@]}")

    # load _git, so that _git-config is available for onyo config completion
    whence -v _git-config > /dev/null || _git

    _onyo_dir() {
        #setopt local_options xtrace
        local REPO=$PWD

        # check if -C or --onyopath is used
        for i in {1..$#fullwords} ; do
            if [[ "$fullwords[$i]" == "-C" ]] || [[ "$fullwords[$i]" == "--onyopath" ]] ; then
                # Hack to unescape any '\ ' from path.
                # Sadly, printf %b does not work here, since it only interprets
                # format controls, not escaping.
                ONYOPATH=$(printf '%b' "$fullwords[$i+1]" | sed 's/\\ / /g')
                REPO=$(realpath "$ONYOPATH")

                [[ -d "$REPO" ]] || printf '"%s" is not a valid directory!\n' "$REPO" >&2
                break
            fi
        done

        printf "$REPO"
    }

    _template_dir() {
        ONYO_DIR=$(_onyo_dir)
        printf "${ONYO_DIR}/.onyo/templates"
    }

    local -a args subcommands
    args=( )
    toplevel_flags=(
        '(- : *)'{-h,--help}'[show this help message and exit]'
        '(-C --onyopath)'{-C,--onyopath}'[run Onyo from DIR instead of the current working directory]:DIR:_files -/'
        '(-d --debug)'{-d,--debug}'[enable debug logging]'
        '(- : *)'{-v,--version}'[print onyo'\''s version and exit]'
        '(-q --quiet)'{-q,--quiet}'[silence messages printed to stdout; does not suppress interactive editors]'
        '(-y --yes)'{-y,--yes}'[respond "yes" to any prompts]'
    )

    subcommands=(
        'cat:print the contents of ASSETs to the terminal'
        'config:set, query, and unset Onyo repository configuration options'
        'edit:open ASSETs using an editor'
        'fsck:run a suite of integrity checks on the Onyo repository and its contents'
        'get:return matching ASSET values corresponding to the requested KEYs'
        'history:display the history of an ASSET or DIRECTORY'
        'init:initialize a new Onyo repository'
        'mkdir:create DIRECTORYs'
        'mv:move SOURCEs (assets and/or directories) to the DEST directory, or rename a SOURCE directory to DEST'
        'new:create new ASSETs and populate with KEY-VALUE pairs'
        'rm:delete ASSETs and DIRECTORYs'
        'set:set the VALUE of KEYs for ASSETs'
        'shell-completion:display a tab-completion script for Onyo'
        'tree:list the assets and directories of DIRECTORYs in a tree-like format'
        'unset:remove KEY from ASSETs'
    )

    _arguments -C $args $toplevel_flags ':subcommand:->subcommand' '*::options:->options' && ret=0

    case $state in
        subcommand)
            _describe -t subcommands 'onyo subcommand' subcommands && ret=0
        ;;

        options)
            curcontext="${curcontext%:*}-$words[2]:"

        case $words[1] in
            cat)
                args+=(
                    '(- : *)'{-h,--help}'[show this help message and exit]'
                    '*:ASSET:_files -W "$(_onyo_dir)"'
                )
                ;;
            config)
                args+=(
                    '(- : *)'{-h,--help}'[show this help message and exit]'
                    '*:ARGS:_git-config'
                )
                ;;
            edit)
                args+=(
                    '(- : *)'{-h,--help}'[show this help message and exit]'
                    '(-m --message)'{-m,--message}'[append MESSAGE to the commit message]:MESSAGE: '
                    '(--no-auto-message)--no-auto-message[do not auto-generate commit message subject]'
                    '*:ASSET:_files -W "$(_onyo_dir)"'
                )
                ;;
            fsck)
                args+=(
                    '(- : *)'{-h,--help}'[show this help message and exit]'
                )
                ;;
            get)
                args+=(
                    '(- : *)'{-h,--help}'[show this help message and exit]'
                    '(-d --depth)'{-d,--depth}'[descend up to DEPTH levels into directories]:DEPTH: '
                    '(-k --keys)'{-k,--keys}'[key values to return]:*-*:KEYS: '
                    '(-H --machine-readable)'{-H,--machine-readable}'[display assets separated by new lines and keys by tabs]'
                    '(-M --match)'{-M,--match}'[criteria to match assets in the form '\''KEY=VALUE'\'', where VALUE is a python regular expression]:*-*:MATCH: '
                    '(-i --include)'{-i,--include}'[assets and/or directories to include in the query]:*-*:PATH:_files -W "$(_onyo_dir)"'
                    '(-e --exclude)'{-e,--exclude}'[assets and/or directories to exclude from the query]:*-*:PATH:_files -W "$(_onyo_dir)"'
                    '(-s --sort-ascending -S --sort-descending)'{-s,--sort-ascending}'[sort output in ascending order]'
                    '(-S --sort-descending -s --sort-ascending)'{-S,--sort-descending}'[sort output in descending order]'
                    '(-t --types)'{-t,--types}'[item types to query]:*-*:TYPES:(assets directories templates)'
                )
                ;;
            history)
                args+=(
                    '(- : *)'{-h,--help}'[show this help message and exit]'
                    '(-I --non-interactive)'{-I,--non-interactive}'[use the non-interactive history tool]'
                    '::PATH:_files -W "$(_onyo_dir)"'
                )
                ;;
            init)
                args+=(
                    '(- : *)'{-h,--help}'[show this help message and exit]'
                    '::DIR:_files -W "$(_onyo_dir)" -/'
                )
                ;;
            mkdir)
                args+=(
                    '(- : *)'{-h,--help}'[show this help message and exit]'
                    '(-m --message)'{-m,--message}'[append MESSAGE to the commit message]:MESSAGE: '
                    '(--no-auto-message)--no-auto-message[do not auto-generate commit message subject]'
                    '*:DIR:_files -W "$(_onyo_dir)" -/'
                )
                ;;
            mv)
                args+=(
                    '(- : *)'{-h,--help}'[show this help message and exit]'
                    '(-m --message)'{-m,--message}'[append MESSAGE to the commit message]:MESSAGE: '
                    '(--no-auto-message)--no-auto-message[do not auto-generate commit message subject]'
                    '*:SOURCE:_files -W "$(_onyo_dir)"'
                    ':DEST:_files -W "$(_onyo_dir)"'
                )
                ;;
            new)
                args+=(
                    '(- : *)'{-h,--help}'[show this help message and exit]'
                    '(-t --template -c --clone)'{-t,--template}'[template to seed the new assets]:TEMPLATE:_files -W "$(_template_dir)"'
                    '(-c --clone -t --template)'{-c,--clone}'[asset path to clone from]:CLONE:_files -W "$(_onyo_dir)"'
                    '(-e --edit)'{-e,--edit}'[open new assets in an editor before creation]'
                    '(-k --keys)'{-k,--keys}'[key-value pairs to set in the new assets]:*-*:KEYS: '
                    '(-d --directory)'{-d,--directory}'[directory to create new assets in]:DIRECTORY:_files -W "$(_onyo_dir)" -/'
                    '(-tsv --tsv)'{-tsv,--tsv}'[path to a TSV file describing the new assets]:TSV:_files -W "$(_onyo_dir)"'
                    '(-m --message)'{-m,--message}'[append MESSAGE to the commit message]:MESSAGE: '
                    '(--no-auto-message)--no-auto-message[do not auto-generate commit message subject]'
                )
                ;;
            rm)
                args+=(
                    '(- : *)'{-h,--help}'[show this help message and exit]'
                    '(-m --message)'{-m,--message}'[append MESSAGE to the commit message]:MESSAGE: '
                    '(--no-auto-message)--no-auto-message[do not auto-generate commit message subject]'
                    '(-r --recursive)'{-r,--recursive}'[remove directories and their contents]'
                    '*:PATH:_files -W "$(_onyo_dir)"'
                )
                ;;
            set)
                args+=(
                    '(- : *)'{-h,--help}'[show this help message and exit]'
                    '(-k --keys)'{-k,--keys}'[key-value pairs to set in assets; multiple pairs can be given (key=value key2=value2)]:*-*:KEYS: '
                    '(-a --asset)'{-a,--asset}'[assets to set KEY=VALUE in]:*-*::ASSET:_files -W "$(_onyo_dir)"'
                    '(-m --message)'{-m,--message}'[append MESSAGE to the commit message]:MESSAGE: '
                    '(--no-auto-message)--no-auto-message[do not auto-generate commit message subject]'
                )
                ;;
            shell-completion)
                args+=(
                    '(- : *)'{-h,--help}'[show this help message and exit]'
                    '(-s --shell)'{-s,--shell}'[which shell to generate a tab-completion script for]:SHELL:(zsh)'
                )
                ;;
            tree)
                args+=(
                    '(- : *)'{-h,--help}'[show this help message and exit]'
                    '*::DIR:_files -W "$(_onyo_dir)" -/'
                )
                ;;
            unset)
                args+=(
                    '(- : *)'{-h,--help}'[show this help message and exit]'
                    '(-k --keys)'{-k,--keys}'[keys to unset in assets; multiple keys can be given (key key2 key3)]:*-*:KEYS: '
                    '(-a --asset)'{-a,--asset}'[assets to unset values in]:*-*::ASSET:_files -W "$(_onyo_dir)"'
                    '(-m --message)'{-m,--message}'[append MESSAGE to the commit message]:MESSAGE: '
                    '(--no-auto-message)--no-auto-message[do not auto-generate commit message subject]'
                )
                ;;

            *)
                args+=(
                    '*: :_default'
                )
                ;;
        esac

        _arguments -s -S $args && ret=0
        ;;
    esac

    return ret
}

# NOTE: If installing the output of this script in your fpath,
#       uncomment '_onyo "$@"' and comment-out "compdef _onyo onyo".
#_onyo "$@"
compdef _onyo onyo

#
# ZSH completion script for Onyo
#
# To use this script and enable tab completion for Onyo rather than just seeing
# this output, run
#
#    source <(onyo shell-completion)
#
